// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this AsymmetricEncryptionKey
func (mg *AsymmetricEncryptionKey) GetTerraformResourceType() string {
	return "yandex_kms_asymmetric_encryption_key"
}

// GetConnectionDetailsMapping for this AsymmetricEncryptionKey
func (tr *AsymmetricEncryptionKey) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AsymmetricEncryptionKey
func (tr *AsymmetricEncryptionKey) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AsymmetricEncryptionKey
func (tr *AsymmetricEncryptionKey) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AsymmetricEncryptionKey
func (tr *AsymmetricEncryptionKey) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AsymmetricEncryptionKey
func (tr *AsymmetricEncryptionKey) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AsymmetricEncryptionKey
func (tr *AsymmetricEncryptionKey) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this AsymmetricEncryptionKey
func (tr *AsymmetricEncryptionKey) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this AsymmetricEncryptionKey using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AsymmetricEncryptionKey) LateInitialize(attrs []byte) (bool, error) {
	params := &AsymmetricEncryptionKeyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AsymmetricEncryptionKey) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this AsymmetricEncryptionKeyIAMBinding
func (mg *AsymmetricEncryptionKeyIAMBinding) GetTerraformResourceType() string {
	return "yandex_kms_asymmetric_encryption_key_iam_binding"
}

// GetConnectionDetailsMapping for this AsymmetricEncryptionKeyIAMBinding
func (tr *AsymmetricEncryptionKeyIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AsymmetricEncryptionKeyIAMBinding
func (tr *AsymmetricEncryptionKeyIAMBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AsymmetricEncryptionKeyIAMBinding
func (tr *AsymmetricEncryptionKeyIAMBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AsymmetricEncryptionKeyIAMBinding
func (tr *AsymmetricEncryptionKeyIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AsymmetricEncryptionKeyIAMBinding
func (tr *AsymmetricEncryptionKeyIAMBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AsymmetricEncryptionKeyIAMBinding
func (tr *AsymmetricEncryptionKeyIAMBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this AsymmetricEncryptionKeyIAMBinding
func (tr *AsymmetricEncryptionKeyIAMBinding) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this AsymmetricEncryptionKeyIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AsymmetricEncryptionKeyIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &AsymmetricEncryptionKeyIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AsymmetricEncryptionKeyIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AsymmetricSignatureKey
func (mg *AsymmetricSignatureKey) GetTerraformResourceType() string {
	return "yandex_kms_asymmetric_signature_key"
}

// GetConnectionDetailsMapping for this AsymmetricSignatureKey
func (tr *AsymmetricSignatureKey) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AsymmetricSignatureKey
func (tr *AsymmetricSignatureKey) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AsymmetricSignatureKey
func (tr *AsymmetricSignatureKey) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AsymmetricSignatureKey
func (tr *AsymmetricSignatureKey) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AsymmetricSignatureKey
func (tr *AsymmetricSignatureKey) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AsymmetricSignatureKey
func (tr *AsymmetricSignatureKey) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this AsymmetricSignatureKey
func (tr *AsymmetricSignatureKey) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this AsymmetricSignatureKey using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AsymmetricSignatureKey) LateInitialize(attrs []byte) (bool, error) {
	params := &AsymmetricSignatureKeyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AsymmetricSignatureKey) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this AsymmetricSignatureKeyIAMBinding
func (mg *AsymmetricSignatureKeyIAMBinding) GetTerraformResourceType() string {
	return "yandex_kms_asymmetric_signature_key_iam_binding"
}

// GetConnectionDetailsMapping for this AsymmetricSignatureKeyIAMBinding
func (tr *AsymmetricSignatureKeyIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AsymmetricSignatureKeyIAMBinding
func (tr *AsymmetricSignatureKeyIAMBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AsymmetricSignatureKeyIAMBinding
func (tr *AsymmetricSignatureKeyIAMBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AsymmetricSignatureKeyIAMBinding
func (tr *AsymmetricSignatureKeyIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AsymmetricSignatureKeyIAMBinding
func (tr *AsymmetricSignatureKeyIAMBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AsymmetricSignatureKeyIAMBinding
func (tr *AsymmetricSignatureKeyIAMBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this AsymmetricSignatureKeyIAMBinding
func (tr *AsymmetricSignatureKeyIAMBinding) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this AsymmetricSignatureKeyIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AsymmetricSignatureKeyIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &AsymmetricSignatureKeyIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AsymmetricSignatureKeyIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecretCiphertext
func (mg *SecretCiphertext) GetTerraformResourceType() string {
	return "yandex_kms_secret_ciphertext"
}

// GetConnectionDetailsMapping for this SecretCiphertext
func (tr *SecretCiphertext) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"plaintext": "spec.forProvider.plaintextSecretRef"}
}

// GetObservation of this SecretCiphertext
func (tr *SecretCiphertext) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecretCiphertext
func (tr *SecretCiphertext) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecretCiphertext
func (tr *SecretCiphertext) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecretCiphertext
func (tr *SecretCiphertext) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecretCiphertext
func (tr *SecretCiphertext) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SecretCiphertext
func (tr *SecretCiphertext) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SecretCiphertext using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecretCiphertext) LateInitialize(attrs []byte) (bool, error) {
	params := &SecretCiphertextParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecretCiphertext) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SymmetricKey
func (mg *SymmetricKey) GetTerraformResourceType() string {
	return "yandex_kms_symmetric_key"
}

// GetConnectionDetailsMapping for this SymmetricKey
func (tr *SymmetricKey) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SymmetricKey
func (tr *SymmetricKey) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SymmetricKey
func (tr *SymmetricKey) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SymmetricKey
func (tr *SymmetricKey) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SymmetricKey
func (tr *SymmetricKey) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SymmetricKey
func (tr *SymmetricKey) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SymmetricKey
func (tr *SymmetricKey) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SymmetricKey using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SymmetricKey) LateInitialize(attrs []byte) (bool, error) {
	params := &SymmetricKeyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SymmetricKey) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this SymmetricKeyIAMBinding
func (mg *SymmetricKeyIAMBinding) GetTerraformResourceType() string {
	return "yandex_kms_symmetric_key_iam_binding"
}

// GetConnectionDetailsMapping for this SymmetricKeyIAMBinding
func (tr *SymmetricKeyIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SymmetricKeyIAMBinding
func (tr *SymmetricKeyIAMBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SymmetricKeyIAMBinding
func (tr *SymmetricKeyIAMBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SymmetricKeyIAMBinding
func (tr *SymmetricKeyIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SymmetricKeyIAMBinding
func (tr *SymmetricKeyIAMBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SymmetricKeyIAMBinding
func (tr *SymmetricKeyIAMBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this SymmetricKeyIAMBinding
func (tr *SymmetricKeyIAMBinding) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// LateInitialize this SymmetricKeyIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SymmetricKeyIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &SymmetricKeyIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SymmetricKeyIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}
